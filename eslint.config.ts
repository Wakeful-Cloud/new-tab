/**
 * @file ESLint configuration
 * @see https://eslint.org/docs/latest/use/configure/
 */

import {dirname, join} from "node:path";
import {fileURLToPath} from "node:url";

import {includeIgnoreFile} from "@eslint/compat";
import js from "@eslint/js";
import importAlias from "@limegrass/eslint-plugin-import-alias";
import jsdoc from "eslint-plugin-jsdoc";
import prettierRecommended from "eslint-plugin-prettier/recommended";
import simpleImportSort from "eslint-plugin-simple-import-sort";
import sortKeysFix from "eslint-plugin-sort-keys-fix";
import unicorn from "eslint-plugin-unicorn";
import globals from "globals";
import tseslint from "typescript-eslint";

const __filename = fileURLToPath(import.meta.url),
  __dirname = dirname(__filename),
  gitignorePath = join(__dirname, ".gitignore");

export default tseslint.config(
  includeIgnoreFile(gitignorePath),
  js.configs.recommended,
  js.configs.all,
  ...tseslint.configs.recommended,
  ...tseslint.configs.strict,
  prettierRecommended,
  jsdoc.configs["flat/recommended"],
  jsdoc.configs["flat/recommended-typescript"],
  {
    languageOptions: {
      ecmaVersion: "latest",
      globals: {
        ...globals.browser,
        ...globals.builtin,
        ...globals.node,
      },
      parserOptions: {
        project: true,
      },
      sourceType: "module",
    },
    plugins: {
      "@limegrass/import-alias": importAlias,
      jsdoc,
      "simple-import-sort": simpleImportSort,
      "sort-keys-fix": sortKeysFix,
      unicorn,
    },
    rules: {
      "@limegrass/import-alias/import-alias": "warn",
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-non-null-assertion": "off",
      "@typescript-eslint/no-this-alias": "off",
      "@typescript-eslint/no-unnecessary-condition": "off",
      "@typescript-eslint/non-nullable-type-assertion-style": "off",
      camelcase: [
        "warn",
        {
          properties: "always",
        },
      ],
      "capitalized-comments": "off",
      eqeqeq: "error",
      "id-length": [
        "error",
        {
          exceptions: [
            "_",
            "i",
            "j",
            "k",
            "x",
            "y",
            "z",
          ],
        },
      ],
      "init-declarations": "off",
      "jsdoc/require-jsdoc": [
        "warn",
        {
          require: {
            ClassDeclaration: true,
            ClassExpression: true,
            FunctionDeclaration: true,
            FunctionExpression: true,
            MethodDefinition: true,
          },
        },
      ],
      "jsdoc/require-param": [
        "warn",
        {
          checkDestructured: false,
          checkDestructuredRoots: false,
        },
      ],
      "max-lines": [
        "warn",
        {
          max: 500,
          skipBlankLines: true,
          skipComments: true,
        },
      ],
      "max-lines-per-function": "off",
      "max-statements": "off",
      "no-await-in-loop": "off",
      "no-console": "off",
      "no-continue": "off",
      "no-extra-semi": "warn",
      "no-magic-numbers": "off",
      "no-plusplus": "off",
      "no-promise-executor-return": "off",
      "no-ternary": "off",
      "no-undef": "off",
      "no-undef-init": "off",
      "no-undefined": "off",
      "no-underscore-dangle": "off",
      "no-useless-assignment": "off",
      "no-var": "error",
      "one-var": "off",
      "padding-line-between-statements": [
        "warn",
        {
          blankLine: "always",
          next: [
            "block",
            "class",
            "do",
            "for",
            "function",
            "if",
            "iife",
            "multiline-const",
            "multiline-expression",
            "multiline-let",
            "multiline-var",
            "switch",
            "try",
            "while",
            "with",
          ],
          prev: "*",
        },
        {
          blankLine: "always",
          next: "*",
          prev: [
            "block",
            "class",
            "do",
            "for",
            "function",
            "if",
            "iife",
            "multiline-const",
            "multiline-expression",
            "multiline-let",
            "multiline-var",
            "switch",
            "try",
            "while",
            "with",
          ],
        },
        {
          blankLine: "always",
          next: [
            "block",
            "block-like",
            "break",
            "case",
            "cjs-export",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "directive",
            "do",
            "empty",
            "export",
            "expression",
            "for",
            "function",
            "if",
            "iife",
            "let",
            "multiline-block-like",
            "multiline-const",
            "multiline-expression",
            "multiline-let",
            "multiline-var",
            "return",
            "singleline-const",
            "singleline-let",
            "singleline-var",
            "switch",
            "throw",
            "try",
            "var",
            "while",
            "with",
          ],
          prev: "import",
        },
        {
          blankLine: "always",
          next: "export",
          prev: [
            "block",
            "block-like",
            "break",
            "case",
            "cjs-import",
            "class",
            "const",
            "continue",
            "debugger",
            "default",
            "directive",
            "do",
            "empty",
            "expression",
            "for",
            "function",
            "if",
            "iife",
            "import",
            "let",
            "multiline-block-like",
            "multiline-const",
            "multiline-expression",
            "multiline-let",
            "multiline-var",
            "return",
            "singleline-const",
            "singleline-let",
            "singleline-var",
            "switch",
            "throw",
            "try",
            "var",
            "while",
            "with",
          ],
        },
      ],
      "prefer-const": "warn",
      "prefer-named-capture-group": "off",
      "prettier/prettier": "warn",
      "simple-import-sort/exports": "error",
      "simple-import-sort/imports": "error",
      "sort-imports": "off",
      "sort-keys-fix/sort-keys-fix": "warn",
      "sort-vars": "off",
      "spaced-comment": [
        "warn",
        "always",
        {
          block: {
            balanced: true,
          },
          markers: ["/"],
        },
      ],
      "unicorn/filename-case": "off",
      "unicorn/no-object-as-default-parameter": "off",
      "unicorn/no-useless-undefined": "off",
      "unicorn/numeric-separators-style": "off",
      "unicorn/prefer-query-selector": "off",
      "unicorn/prefer-top-level-await": "off",
      "unicorn/prevent-abbreviations": "off",
      "unicorn/switch-case-braces": "off",
    },
  },
);
